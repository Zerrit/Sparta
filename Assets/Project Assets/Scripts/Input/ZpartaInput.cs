//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Project Assets/Scripts/Input/ZpartaInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ZpartaInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ZpartaInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ZpartaInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""527ac0d4-6d4a-4655-9f05-585c24c91e5b"",
            ""actions"": [
                {
                    ""name"": ""TestMovement"",
                    ""type"": ""Value"",
                    ""id"": ""3aad41d5-eb78-4835-a8e2-9167719b1c55"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""58419f41-6ed1-4da2-aba8-2b7815047319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PunchCharge"",
                    ""type"": ""Button"",
                    ""id"": ""37db37f4-f843-42f6-bb8c-3d257e448c89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""Value"",
                    ""id"": ""450698ca-20ce-48af-bfc3-c1bff2eaf0e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SimpleMove"",
                    ""type"": ""Button"",
                    ""id"": ""1abb1dab-a4c6-4b2d-b35c-bf4b3fc8a99d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainTouch"",
                    ""type"": ""Value"",
                    ""id"": ""0408984d-90e1-49fd-ae68-ca9f3fd0715d"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""89f88745-44f6-4090-809f-d4724caaef32"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dd7a0fec-3170-4ac0-850e-61335030a8cf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""TestMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7b91dcd8-1605-4623-b39b-9c1884a8facd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""TestMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f83ebe61-4c99-4f2f-8fdf-77270fbb38a7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""TestMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7d36f49-b597-4951-8235-5bbd34ad0a69"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""TestMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b3cb0cb-29d6-4406-bf18-9c3807b694a4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5356255-0485-4c6a-b5e6-2d18205368cd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ZpartaScheme"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07cde62a-e885-4e0b-8fd3-e78fe25a766c"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchCharge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6541b7ec-c1a8-42c6-aae3-17fd60486d94"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60fbb030-b93d-4f00-9bcd-9c465a980a03"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SimpleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ac6b36e-039a-4411-b03f-c8989478904a"",
                    ""path"": ""<Touchscreen>/touch0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ZpartaScheme"",
            ""bindingGroup"": ""ZpartaScheme"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TestMovement = m_Player.FindAction("TestMovement", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_PunchCharge = m_Player.FindAction("PunchCharge", throwIfNotFound: true);
        m_Player_MoveDirection = m_Player.FindAction("MoveDirection", throwIfNotFound: true);
        m_Player_SimpleMove = m_Player.FindAction("SimpleMove", throwIfNotFound: true);
        m_Player_MainTouch = m_Player.FindAction("MainTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_TestMovement;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_PunchCharge;
    private readonly InputAction m_Player_MoveDirection;
    private readonly InputAction m_Player_SimpleMove;
    private readonly InputAction m_Player_MainTouch;
    public struct PlayerActions
    {
        private @ZpartaInput m_Wrapper;
        public PlayerActions(@ZpartaInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestMovement => m_Wrapper.m_Player_TestMovement;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @PunchCharge => m_Wrapper.m_Player_PunchCharge;
        public InputAction @MoveDirection => m_Wrapper.m_Player_MoveDirection;
        public InputAction @SimpleMove => m_Wrapper.m_Player_SimpleMove;
        public InputAction @MainTouch => m_Wrapper.m_Player_MainTouch;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @TestMovement.started += instance.OnTestMovement;
            @TestMovement.performed += instance.OnTestMovement;
            @TestMovement.canceled += instance.OnTestMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @PunchCharge.started += instance.OnPunchCharge;
            @PunchCharge.performed += instance.OnPunchCharge;
            @PunchCharge.canceled += instance.OnPunchCharge;
            @MoveDirection.started += instance.OnMoveDirection;
            @MoveDirection.performed += instance.OnMoveDirection;
            @MoveDirection.canceled += instance.OnMoveDirection;
            @SimpleMove.started += instance.OnSimpleMove;
            @SimpleMove.performed += instance.OnSimpleMove;
            @SimpleMove.canceled += instance.OnSimpleMove;
            @MainTouch.started += instance.OnMainTouch;
            @MainTouch.performed += instance.OnMainTouch;
            @MainTouch.canceled += instance.OnMainTouch;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @TestMovement.started -= instance.OnTestMovement;
            @TestMovement.performed -= instance.OnTestMovement;
            @TestMovement.canceled -= instance.OnTestMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @PunchCharge.started -= instance.OnPunchCharge;
            @PunchCharge.performed -= instance.OnPunchCharge;
            @PunchCharge.canceled -= instance.OnPunchCharge;
            @MoveDirection.started -= instance.OnMoveDirection;
            @MoveDirection.performed -= instance.OnMoveDirection;
            @MoveDirection.canceled -= instance.OnMoveDirection;
            @SimpleMove.started -= instance.OnSimpleMove;
            @SimpleMove.performed -= instance.OnSimpleMove;
            @SimpleMove.canceled -= instance.OnSimpleMove;
            @MainTouch.started -= instance.OnMainTouch;
            @MainTouch.performed -= instance.OnMainTouch;
            @MainTouch.canceled -= instance.OnMainTouch;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_ZpartaSchemeSchemeIndex = -1;
    public InputControlScheme ZpartaSchemeScheme
    {
        get
        {
            if (m_ZpartaSchemeSchemeIndex == -1) m_ZpartaSchemeSchemeIndex = asset.FindControlSchemeIndex("ZpartaScheme");
            return asset.controlSchemes[m_ZpartaSchemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnTestMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPunchCharge(InputAction.CallbackContext context);
        void OnMoveDirection(InputAction.CallbackContext context);
        void OnSimpleMove(InputAction.CallbackContext context);
        void OnMainTouch(InputAction.CallbackContext context);
    }
}
